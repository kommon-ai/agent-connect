// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/remote.proto

package remoteconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	remote "github.com/kommon-ai/agent-connect/gen/remote"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// RemoteAgentServiceName is the fully-qualified name of the RemoteAgentService service.
	RemoteAgentServiceName = "remote.RemoteAgentService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// RemoteAgentServiceExecuteTaskProcedure is the fully-qualified name of the RemoteAgentService's
	// ExecuteTask RPC.
	RemoteAgentServiceExecuteTaskProcedure = "/remote.RemoteAgentService/ExecuteTask"
	// RemoteAgentServicePingProcedure is the fully-qualified name of the RemoteAgentService's Ping RPC.
	RemoteAgentServicePingProcedure = "/remote.RemoteAgentService/Ping"
)

// RemoteAgentServiceClient is a client for the remote.RemoteAgentService service.
type RemoteAgentServiceClient interface {
	ExecuteTask(context.Context, *connect_go.Request[remote.ExecuteTaskRequest]) (*connect_go.Response[remote.ExecuteTaskResponse], error)
	Ping(context.Context, *connect_go.Request[remote.PingRequest]) (*connect_go.Response[remote.PingResponse], error)
}

// NewRemoteAgentServiceClient constructs a client for the remote.RemoteAgentService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRemoteAgentServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) RemoteAgentServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &remoteAgentServiceClient{
		executeTask: connect_go.NewClient[remote.ExecuteTaskRequest, remote.ExecuteTaskResponse](
			httpClient,
			baseURL+RemoteAgentServiceExecuteTaskProcedure,
			opts...,
		),
		ping: connect_go.NewClient[remote.PingRequest, remote.PingResponse](
			httpClient,
			baseURL+RemoteAgentServicePingProcedure,
			opts...,
		),
	}
}

// remoteAgentServiceClient implements RemoteAgentServiceClient.
type remoteAgentServiceClient struct {
	executeTask *connect_go.Client[remote.ExecuteTaskRequest, remote.ExecuteTaskResponse]
	ping        *connect_go.Client[remote.PingRequest, remote.PingResponse]
}

// ExecuteTask calls remote.RemoteAgentService.ExecuteTask.
func (c *remoteAgentServiceClient) ExecuteTask(ctx context.Context, req *connect_go.Request[remote.ExecuteTaskRequest]) (*connect_go.Response[remote.ExecuteTaskResponse], error) {
	return c.executeTask.CallUnary(ctx, req)
}

// Ping calls remote.RemoteAgentService.Ping.
func (c *remoteAgentServiceClient) Ping(ctx context.Context, req *connect_go.Request[remote.PingRequest]) (*connect_go.Response[remote.PingResponse], error) {
	return c.ping.CallUnary(ctx, req)
}

// RemoteAgentServiceHandler is an implementation of the remote.RemoteAgentService service.
type RemoteAgentServiceHandler interface {
	ExecuteTask(context.Context, *connect_go.Request[remote.ExecuteTaskRequest]) (*connect_go.Response[remote.ExecuteTaskResponse], error)
	Ping(context.Context, *connect_go.Request[remote.PingRequest]) (*connect_go.Response[remote.PingResponse], error)
}

// NewRemoteAgentServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRemoteAgentServiceHandler(svc RemoteAgentServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	remoteAgentServiceExecuteTaskHandler := connect_go.NewUnaryHandler(
		RemoteAgentServiceExecuteTaskProcedure,
		svc.ExecuteTask,
		opts...,
	)
	remoteAgentServicePingHandler := connect_go.NewUnaryHandler(
		RemoteAgentServicePingProcedure,
		svc.Ping,
		opts...,
	)
	return "/remote.RemoteAgentService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RemoteAgentServiceExecuteTaskProcedure:
			remoteAgentServiceExecuteTaskHandler.ServeHTTP(w, r)
		case RemoteAgentServicePingProcedure:
			remoteAgentServicePingHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRemoteAgentServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRemoteAgentServiceHandler struct{}

func (UnimplementedRemoteAgentServiceHandler) ExecuteTask(context.Context, *connect_go.Request[remote.ExecuteTaskRequest]) (*connect_go.Response[remote.ExecuteTaskResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("remote.RemoteAgentService.ExecuteTask is not implemented"))
}

func (UnimplementedRemoteAgentServiceHandler) Ping(context.Context, *connect_go.Request[remote.PingRequest]) (*connect_go.Response[remote.PingResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("remote.RemoteAgentService.Ping is not implemented"))
}
